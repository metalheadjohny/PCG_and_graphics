cbuffer LightBuffer{
	float3 alc;
	float ali;
	float3 dlc;
	float dli;
	float3 slc;
	float sli;
    float4 lightDirection;
	float4 ePos;
};


struct PixelInputType{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float4 worldPos : WPOS;
};

Texture2D shaderTexture;
SamplerState SampleType;


float4 LightPixelShader(PixelInputType input) : SV_TARGET{
	
	input.normal = normalize(input.normal);

	float4 colour = shaderTexture.Sample(SampleType, input.tex);

	//ambient light
	float4 ambient = saturate(float4(alc, 1.0f) * ali);
	colour += ambient;

	//diffuse light
	float4 inverseLightDir = -lightDirection;
    float dFactor = saturate(dot(input.normal, inverseLightDir.xyz));
	float4 diffuse = float4(dlc, 1.0f) * dli * dFactor;
	colour += diffuse;

	//some setup for specular
	float facing = dFactor > 0.0001f ? 1.0f : 0.0f;
	float4 pToEye = normalize(ePos - input.worldPos);

	//go 2-4 times higher on this when using blinn phong compared to phong
	float SpecularPower = 64.f;

	/*	specular light	phong 
	float3 reflectionVector = 2 * dot( input.normal, inverseLightDir.xyz ) * input.normal - inverseLightDir.xyz;
	//float3 reflectionVector = reflect(input.normal, inverseLightDir.xyz);
	float sFactor = saturate(dot(reflectionVector, pToEye));
	sFactor = pow(sFactor, SpecularPower);
	/* */

	/* specular light blinn-phong */
	float3 halfVector = normalize(inverseLightDir + pToEye.xyz);
	float sFactor  = pow( max( dot(input.normal.xyz, halfVector), 0.0f ), SpecularPower );
	/* */
	
	float4 specular = float4(slc, 1.0f) * sli * sFactor;	
		
	colour += saturate(specular);

	//colour.xyz = pow( colour, float3(1.0f/2.2f, 1.0f/2.2f, 1.0f/2.2f) );
	
    return colour;


	//NVIDIA FORMULA FOR BLINN-PHONG:
	//Ks * lightColour * facing * max(dot(N, H), 0)	
	//Ks is material's specular colour
	//lightColour is float4(slc, 1.0f) aka the colour of light
	//facing is 1 or 0
	//N is the normalized surface normal
	//V is the normalized vector towards the viewpoint (pToEye)
	//L is the normalized vector towars the light source (inverseLightDir)
	//H is the normalized vector halfway between V and L (pToEye + inverseLightDir)
}
