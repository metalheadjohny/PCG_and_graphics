Texture2D shaderTexture : register(t0);
Texture2D depthMapTexture : register(t1);

SamplerState SampleTypeClamp : register(s0);
SamplerState SampleTypeWrap  : register(s1);


cbuffer LightBuffer{
	float3 alc;
	float ali;
	float3 dlc;
	float dli;
	float3 slc;
	float sli;
    float4 lightPosition;
	float4 ePos;
};


struct PixelInputType{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float4 worldPosition : REKT;
    float4 fragPosLightSpace : TEXCOORD1;
    float3 lightPos : TEXCOORD2;
};


float4 ShadowPixelShader(PixelInputType input) : SV_TARGET{

    float4 colour;
    float2 projectTexCoord;
    float closestDepth;
    float lightDepthValue;
    float lightIntensity;

	input.normal = normalize(input.normal);

    float bias = 0.00001f;

	colour = shaderTexture.Sample(SampleTypeWrap, input.tex);

	//lightViewPosition is actually the screen position of pixels relative to the light source
	///and we just replicate the same procedure that the usual position would go through when being prepared for the fragment shader
    projectTexCoord.x =  input.fragPosLightSpace.x / input.fragPosLightSpace.w / 2.0f + 0.5f;
    projectTexCoord.y = -input.fragPosLightSpace.y / input.fragPosLightSpace.w / 2.0f + 0.5f;

	
    if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y)){

        closestDepth = depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r;

        //lightDepthValue = ( (2.f * input.fragPosLightSpace.z - 500.01f ) / 499.99f ) / input.fragPosLightSpace.w;
		lightDepthValue = input.fragPosLightSpace.z / input.fragPosLightSpace.w;	// input.fragPosLightSpace.w

        lightDepthValue -= bias;

        if(lightDepthValue > closestDepth){

			colour -= float4(alc * ali, 1.0f);
		}
    }

	colour += saturate(float4(alc * ali, 1.0f));

	float3 inverseLightDir = normalize(input.lightPos - input.worldPosition);
	float dFactor = saturate(dot(input.normal, inverseLightDir));
	float4 diffuse = saturate(float4(dlc, 1.0f) * dli * dFactor);
	colour += diffuse;
	
	//some setup for specular
	float facing = dFactor > 0.0001f ? 1.0f : 0.0f;
	float4 pToEye = normalize(ePos - input.worldPosition);
	float SpecularPower = 16.f;

	//specular light phong
	float3 reflectionVector = 2 * dot( input.normal, inverseLightDir.xyz ) * input.normal - inverseLightDir.xyz;
	//float3 reflectionVector = reflect(input.normal, inverseLightDir.xyz);
	float sFactor = saturate(dot(reflectionVector, pToEye.xyz));
	sFactor = pow(sFactor, SpecularPower);

			
	//specular light blinn-phong 
	float3 halfVector = normalize(inverseLightDir + pToEye.xyz);
	sFactor  = pow( max( dot(input.normal.xyz, halfVector), 0.0f ), SpecularPower );
			

	float4 specular = float4(slc, 1.0f) * sli * sFactor;	
	colour += saturate(specular);
			
	//colour = float4(1.0f, 0.0f, 0.0f, 1.0f);


    //colour = colour * texturecolour;
    return colour;
}
